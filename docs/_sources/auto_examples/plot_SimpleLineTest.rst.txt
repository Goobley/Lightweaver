
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_SimpleLineTest.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_SimpleLineTest.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_SimpleLineTest.py:


===============================================================
Computing a simple NLTE 8542 line profile in a FAL C atmosphere
===============================================================

.. GENERATED FROM PYTHON SOURCE LINES 7-10

First, we import everything we need. Lightweaver is typically imported as
`lw`, but things like the library of model atoms and Fal atmospheres need to
be imported separately.

.. GENERATED FROM PYTHON SOURCE LINES 10-19

.. code-block:: default

    from lightweaver.fal import Falc82
    from lightweaver.rh_atoms import H_6_atom, C_atom, O_atom, Si_atom, Al_atom, \
    CaII_atom, Fe_atom, He_9_atom, MgII_atom, N_atom, Na_atom, S_atom
    import lightweaver as lw
    import matplotlib.pyplot as plt
    import time
    import numpy as np









.. GENERATED FROM PYTHON SOURCE LINES 20-23

Now, we define the functions that will be used in our spectral synthesise.
First `synth_8542` which synthesises and returns the line given by an
atmosphere.

.. GENERATED FROM PYTHON SOURCE LINES 23-86

.. code-block:: default

    def synth_8542(atmos, conserve, useNe, wave):
        '''
        Synthesise a spectral line for given atmosphere with different
        conditions.

        Parameters
        ----------
        atmos : lw.Atmosphere
            The atmospheric model in which to synthesise the line.
        conserve : bool
            Whether to start from LTE electron density and conserve charge, or
            simply use from the electron density present in the atomic model.
        useNe : bool
            Whether to use the electron density present in the model as the
            starting solution, or compute the LTE electron density.
        wave : np.ndarray
            Array of wavelengths over which to resynthesise the final line
            profile for muz=1.

        Returns
        -------
        ctx : lw.Context
            The Context object that was used to compute the equilibrium
            populations.
        Iwave : np.ndarray
            The intensity at muz=1 for each wavelength in `wave`.
        '''
        # Configure the atmospheric angular quadrature
        atmos.quadrature(5)
        # Configure the set of atomic models to use.
        aSet = lw.RadiativeSet([H_6_atom(), C_atom(), O_atom(), Si_atom(),
                                Al_atom(), CaII_atom(), Fe_atom(), He_9_atom(),
                                MgII_atom(), N_atom(), Na_atom(), S_atom()
                               ])
        # Set H and Ca to "active" i.e. NLTE, everything else participates as an
        # LTE background.
        aSet.set_active('H', 'Ca')
        # Compute the necessary wavelength dependent information (SpectrumConfiguration).
        spect = aSet.compute_wavelength_grid()

        # Either compute the equilibrium populations at the fixed electron density
        # provided in the model, or iterate an LTE electron density and compute the
        # corresponding equilibrium populations (SpeciesStateTable).
        if useNe:
            eqPops = aSet.compute_eq_pops(atmos)
        else:
            eqPops = aSet.iterate_lte_ne_eq_pops(atmos)

        # Configure the Context which holds the state of the simulation for the
        # backend, and provides the python interface to the backend.
        # Feel free to increase Nthreads to increase the number of threads the
        # program will use.
        ctx = lw.Context(atmos, spect, eqPops, conserveCharge=conserve, Nthreads=1)
        # Iterate the Context to convergence (using the iteration function now
        # provided by Lightweaver)
        lw.iterate_ctx_se(ctx)
        # Update the background populations based on the converged solution and
        # compute the final intensity for mu=1 on the provided wavelength grid.
        eqPops.update_lte_atoms_Hmin_pops(atmos)
        Iwave = ctx.compute_rays(wave, [atmos.muz[-1]], stokes=False)
        return ctx, Iwave









.. GENERATED FROM PYTHON SOURCE LINES 87-88

The wavelength grid to output the final synthesised line on.

.. GENERATED FROM PYTHON SOURCE LINES 88-90

.. code-block:: default

    wave = np.linspace(853.9444, 854.9444, 1001)








.. GENERATED FROM PYTHON SOURCE LINES 91-99

Load an lw.Atmosphere object containing the FAL C atmosphere with 82 points
in depth, before synthesising the Ca II 8542 \AA line profile using:

- The given electron density.
- The electron density charge conserved from a starting LTE solution.
- The LTE electron density.

These results are then plotted.

.. GENERATED FROM PYTHON SOURCE LINES 99-112

.. code-block:: default


    atmosRef = Falc82()
    ctxRef, IwaveRef = synth_8542(atmosRef, conserve=False, useNe=True, wave=wave)
    atmosCons = Falc82()
    ctxCons, IwaveCons = synth_8542(atmosCons, conserve=True, useNe=False, wave=wave)
    atmosLte = Falc82()
    ctx, IwaveLte = synth_8542(atmosLte, conserve=False, useNe=False, wave=wave)

    plt.plot(wave, IwaveRef, label='Reference FAL')
    plt.plot(wave, IwaveCons, label='Reference Cons')
    plt.plot(wave, IwaveLte, label='Reference LTE n_e')
    plt.legend()
    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_SimpleLineTest_001.png
   :alt: plot SimpleLineTest
   :srcset: /auto_examples/images/sphx_glr_plot_SimpleLineTest_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    -- Iteration 0:
    dJ = 1.00e+00
        (Lambda iterating background)
    -- Iteration 6:
    dJ = 2.37e+00
        H delta = 5.9290e-01
        Ca delta = 2.1540e-01
    -- Iteration 12:
    dJ = 3.93e-01
        H delta = 1.9858e-01
        Ca delta = 1.4962e-01
    -- Iteration 18:
    dJ = 1.37e-01
        H delta = 7.1397e-02
        Ca delta = 6.8288e-02
    -- Iteration 24:
    dJ = 9.43e-02
        H delta = 5.2630e-02
        Ca delta = 4.1531e-02
    -- Iteration 30:
    dJ = 7.65e-02
        H delta = 4.7479e-02
        Ca delta = 2.9286e-02
    -- Iteration 36:
    dJ = 6.96e-02
        H delta = 4.3111e-02
        Ca delta = 2.2943e-02
    -- Iteration 42:
    dJ = 6.41e-02
        H delta = 3.7163e-02
        Ca delta = 1.8058e-02
    -- Iteration 48:
    dJ = 5.78e-02
        H delta = 3.1196e-02
        Ca delta = 1.3772e-02
    -- Iteration 54:
    dJ = 4.94e-02
        H delta = 2.4380e-02
        Ca delta = 9.8687e-03
    -- Iteration 60:
    dJ = 3.92e-02
        H delta = 2.0252e-02
        Ca delta = 6.7130e-03
    -- Iteration 66:
    dJ = 2.79e-02
        H delta = 1.5184e-02
        Ca delta = 4.2360e-03
    -- Iteration 72:
    dJ = 1.87e-02
        H delta = 1.0371e-02
        Ca delta = 2.5947e-03
    -- Iteration 77:
    dJ = 1.26e-02
        H delta = 7.0785e-03
        Ca delta = 1.6607e-03
    -- Iteration 83:
    dJ = 7.52e-03
        H delta = 4.2874e-03
        Ca delta = 9.5703e-04
    -- Iteration 89:
    dJ = 4.37e-03
        H delta = 2.5093e-03
        Ca delta = 5.4416e-04
    -- Iteration 95:
    dJ = 2.49e-03
        H delta = 1.4378e-03
        Ca delta = 3.0677e-04
    --------------------------------------------------------------------------------
    Final Iteration: 99
    --------------------------------------------------------------------------------
    dJ = 1.70e-03
        H delta = 9.8324e-04
        Ca delta = 2.0990e-04
    --------------------------------------------------------------------------------
    Context converged to statistical equilibrium in 99 iterations after 3.86 s.
    --------------------------------------------------------------------------------
    LTE Iterations 1 (-- slowest convergence)
    -- Iteration 0:
    dJ = 1.00e+00
        (Lambda iterating background)
    -- Iteration 6:
    dJ = 1.38e+00
        H delta = 5.8716e-01
        Ca delta = 2.2064e-01
        ne delta = 3.3516e-04
    -- Iteration 11:
    dJ = 4.20e-01
        H delta = 2.8874e-01
        Ca delta = 1.4636e-01
        ne delta = 2.3009e-12
    -- Iteration 16:
    dJ = 1.65e-01
        H delta = 1.2791e-01
        Ca delta = 7.6553e-02
        ne delta = 1.8129e-14
    -- Iteration 21:
    dJ = 1.13e-01
        H delta = 6.8391e-02
        Ca delta = 4.8799e-02
        ne delta = 4.7418e-16
    -- Iteration 26:
    dJ = 8.76e-02
        H delta = 5.3076e-02
        Ca delta = 3.3993e-02
        ne delta = 1.3545e-15
    -- Iteration 31:
    dJ = 7.61e-02
        H delta = 4.8553e-02
        Ca delta = 2.5084e-02
        ne delta = 5.1034e-16
    -- Iteration 36:
    dJ = 6.91e-02
        H delta = 4.4754e-02
        Ca delta = 1.9169e-02
        ne delta = 1.0560e-15
    -- Iteration 41:
    dJ = 6.45e-02
        H delta = 3.9835e-02
        Ca delta = 1.4781e-02
        ne delta = 1.3545e-15
    -- Iteration 46:
    dJ = 6.03e-02
        H delta = 3.5617e-02
        Ca delta = 1.1074e-02
        ne delta = 7.0403e-16
    -- Iteration 51:
    dJ = 5.55e-02
        H delta = 3.3401e-02
        Ca delta = 7.9340e-03
        ne delta = 1.8713e-15
    -- Iteration 56:
    dJ = 4.95e-02
        H delta = 3.0494e-02
        Ca delta = 5.4372e-03
        ne delta = 1.8713e-15
    -- Iteration 61:
    dJ = 4.30e-02
        H delta = 2.6848e-02
        Ca delta = 3.5450e-03
        ne delta = 1.5411e-15
    -- Iteration 66:
    dJ = 3.53e-02
        H delta = 2.2680e-02
        Ca delta = 2.3261e-03
        ne delta = 1.7609e-15
    -- Iteration 71:
    dJ = 2.79e-02
        H delta = 1.8281e-02
        Ca delta = 1.8786e-03
        ne delta = 7.0403e-16
    -- Iteration 76:
    dJ = 2.16e-02
        H delta = 1.4269e-02
        Ca delta = 1.5822e-03
        ne delta = 6.8046e-16
    -- Iteration 81:
    dJ = 1.60e-02
        H delta = 1.0674e-02
        Ca delta = 1.2553e-03
        ne delta = 8.2981e-16
    -- Iteration 86:
    dJ = 1.16e-02
        H delta = 7.7787e-03
        Ca delta = 9.4461e-04
        ne delta = 1.8713e-15
    -- Iteration 91:
    dJ = 8.20e-03
        H delta = 5.4886e-03
        Ca delta = 6.8131e-04
        ne delta = 1.3545e-16
    -- Iteration 96:
    dJ = 5.63e-03
        H delta = 3.7802e-03
        Ca delta = 4.7864e-04
        ne delta = 6.8046e-16
    -- Iteration 101:
    dJ = 3.82e-03
        H delta = 2.5696e-03
        Ca delta = 3.3001e-04
        ne delta = 2.2562e-15
    -- Iteration 106:
    dJ = 2.57e-03
        H delta = 1.7315e-03
        Ca delta = 2.2430e-04
        ne delta = 1.8713e-15
    -- Iteration 111:
    dJ = 1.72e-03
        H delta = 1.1598e-03
        Ca delta = 1.5117e-04
        ne delta = 1.7134e-15
    --------------------------------------------------------------------------------
    Final Iteration: 113
    --------------------------------------------------------------------------------
    dJ = 1.46e-03
        H delta = 9.8695e-04
        Ca delta = 1.2885e-04
        ne delta = 9.4815e-16
    --------------------------------------------------------------------------------
    Context converged to statistical equilibrium in 113 iterations after 4.78 s.
    --------------------------------------------------------------------------------
    LTE Iterations 1 (-- slowest convergence)
    -- Iteration 0:
    dJ = 1.00e+00
        (Lambda iterating background)
    -- Iteration 6:
    dJ = 1.64e+00
        H delta = 5.8678e-01
        Ca delta = 2.5880e-01
    -- Iteration 12:
    dJ = 2.83e-01
        H delta = 1.4218e-01
        Ca delta = 1.0595e-01
    -- Iteration 18:
    dJ = 1.28e-01
        H delta = 6.8842e-02
        Ca delta = 4.6469e-02
    -- Iteration 24:
    dJ = 8.98e-02
        H delta = 5.4233e-02
        Ca delta = 2.9931e-02
    -- Iteration 30:
    dJ = 7.33e-02
        H delta = 4.8640e-02
        Ca delta = 2.2360e-02
    -- Iteration 36:
    dJ = 6.51e-02
        H delta = 4.3318e-02
        Ca delta = 1.7381e-02
    -- Iteration 42:
    dJ = 5.83e-02
        H delta = 3.6137e-02
        Ca delta = 1.3145e-02
    -- Iteration 48:
    dJ = 5.03e-02
        H delta = 2.8044e-02
        Ca delta = 9.4111e-03
    -- Iteration 54:
    dJ = 3.99e-02
        H delta = 2.0279e-02
        Ca delta = 6.3291e-03
    -- Iteration 60:
    dJ = 2.92e-02
        H delta = 1.5303e-02
        Ca delta = 3.9851e-03
    -- Iteration 66:
    dJ = 1.93e-02
        H delta = 1.0428e-02
        Ca delta = 2.3975e-03
    -- Iteration 72:
    dJ = 1.22e-02
        H delta = 6.6360e-03
        Ca delta = 1.4281e-03
    -- Iteration 77:
    dJ = 8.01e-03
        H delta = 4.3965e-03
        Ca delta = 8.9956e-04
    -- Iteration 82:
    dJ = 5.05e-03
        H delta = 2.8071e-03
        Ca delta = 5.4884e-04
    -- Iteration 88:
    dJ = 2.87e-03
        H delta = 1.5999e-03
        Ca delta = 3.0547e-04
    --------------------------------------------------------------------------------
    Final Iteration: 93
    --------------------------------------------------------------------------------
    dJ = 1.77e-03
        H delta = 9.8999e-04
        Ca delta = 1.8946e-04
    --------------------------------------------------------------------------------
    Context converged to statistical equilibrium in 93 iterations after 3.59 s.
    --------------------------------------------------------------------------------
    LTE Iterations 1 (-- slowest convergence)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.637 seconds)


.. _sphx_glr_download_auto_examples_plot_SimpleLineTest.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_SimpleLineTest.py <plot_SimpleLineTest.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_SimpleLineTest.ipynb <plot_SimpleLineTest.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
