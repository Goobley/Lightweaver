
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_SimpleLineTest.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_SimpleLineTest.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_SimpleLineTest.py:


===============================================================
Computing a simple NLTE 8542 line profile in a FAL C atmosphere
===============================================================

.. GENERATED FROM PYTHON SOURCE LINES 7-10

First, we import everything we need. Lightweaver is typically imported as
`lw`, but things like the library of model atoms and Fal atmospheres need to
be imported separately.

.. GENERATED FROM PYTHON SOURCE LINES 10-19

.. code-block:: default

    from lightweaver.fal import Falc82
    from lightweaver.rh_atoms import H_6_atom, C_atom, O_atom, Si_atom, Al_atom, \
    CaII_atom, Fe_atom, He_9_atom, MgII_atom, N_atom, Na_atom, S_atom
    import lightweaver as lw
    import matplotlib.pyplot as plt
    import time
    import numpy as np









.. GENERATED FROM PYTHON SOURCE LINES 20-23

Now, we define the functions that will be used in our spectral synthesise.
First `synth_8542` which synthesises and returns the line given by an
atmosphere.

.. GENERATED FROM PYTHON SOURCE LINES 23-86

.. code-block:: default

    def synth_8542(atmos, conserve, useNe, wave):
        '''
        Synthesise a spectral line for given atmosphere with different
        conditions.

        Parameters
        ----------
        atmos : lw.Atmosphere
            The atmospheric model in which to synthesise the line.
        conserve : bool
            Whether to start from LTE electron density and conserve charge, or
            simply use from the electron density present in the atomic model.
        useNe : bool
            Whether to use the electron density present in the model as the
            starting solution, or compute the LTE electron density.
        wave : np.ndarray
            Array of wavelengths over which to resynthesise the final line
            profile for muz=1.

        Returns
        -------
        ctx : lw.Context
            The Context object that was used to compute the equilibrium
            populations.
        Iwave : np.ndarray
            The intensity at muz=1 for each wavelength in `wave`.
        '''
        # Configure the atmospheric angular quadrature
        atmos.quadrature(5)
        # Configure the set of atomic models to use.
        aSet = lw.RadiativeSet([H_6_atom(), C_atom(), O_atom(), Si_atom(),
                                Al_atom(), CaII_atom(), Fe_atom(), He_9_atom(),
                                MgII_atom(), N_atom(), Na_atom(), S_atom()
                               ])
        # Set H and Ca to "active" i.e. NLTE, everything else participates as an
        # LTE background.
        aSet.set_active('H', 'Ca')
        # Compute the necessary wavelength dependent information (SpectrumConfiguration).
        spect = aSet.compute_wavelength_grid()

        # Either compute the equilibrium populations at the fixed electron density
        # provided in the model, or iterate an LTE electron density and compute the
        # corresponding equilibrium populations (SpeciesStateTable).
        if useNe:
            eqPops = aSet.compute_eq_pops(atmos)
        else:
            eqPops = aSet.iterate_lte_ne_eq_pops(atmos)

        # Configure the Context which holds the state of the simulation for the
        # backend, and provides the python interface to the backend.
        # Feel free to increase Nthreads to increase the number of threads the
        # program will use.
        ctx = lw.Context(atmos, spect, eqPops, conserveCharge=conserve, Nthreads=1)
        # Iterate the Context to convergence (using the iteration function now
        # provided by Lightweaver)
        lw.iterate_ctx_se(ctx)
        # Update the background populations based on the converged solution and
        # compute the final intensity for mu=1 on the provided wavelength grid.
        eqPops.update_lte_atoms_Hmin_pops(atmos)
        Iwave = ctx.compute_rays(wave, [atmos.muz[-1]], stokes=False)
        return ctx, Iwave









.. GENERATED FROM PYTHON SOURCE LINES 87-88

The wavelength grid to output the final synthesised line on.

.. GENERATED FROM PYTHON SOURCE LINES 88-90

.. code-block:: default

    wave = np.linspace(853.9444, 854.9444, 1001)








.. GENERATED FROM PYTHON SOURCE LINES 91-99

Load an lw.Atmosphere object containing the FAL C atmosphere with 82 points
in depth, before synthesising the Ca II 8542 \AA line profile using:

- The given electron density.
- The electron density charge conserved from a starting LTE solution.
- The LTE electron density.

These results are then plotted.

.. GENERATED FROM PYTHON SOURCE LINES 99-112

.. code-block:: default


    atmosRef = Falc82()
    ctxRef, IwaveRef = synth_8542(atmosRef, conserve=False, useNe=True, wave=wave)
    atmosCons = Falc82()
    ctxCons, IwaveCons = synth_8542(atmosCons, conserve=True, useNe=False, wave=wave)
    atmosLte = Falc82()
    ctx, IwaveLte = synth_8542(atmosLte, conserve=False, useNe=False, wave=wave)

    plt.plot(wave, IwaveRef, label='Reference FAL')
    plt.plot(wave, IwaveCons, label='Reference Cons')
    plt.plot(wave, IwaveLte, label='Reference LTE n_e')
    plt.legend()
    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_SimpleLineTest_001.png
   :alt: plot SimpleLineTest
   :srcset: /auto_examples/images/sphx_glr_plot_SimpleLineTest_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    -- Iteration 0:
    dJ = 1.00e+00
        (Lambda iterating background)
    -- Iteration 5:
    dJ = 4.73e+00
        H delta = 9.3052e-01
        Ca delta = 3.5881e-01
    -- Iteration 10:
    dJ = 7.60e-01
        H delta = 2.6560e-01
        Ca delta = 2.0324e-01
    -- Iteration 15:
    dJ = 2.05e-01
        H delta = 1.1034e-01
        Ca delta = 9.7080e-02
    -- Iteration 20:
    dJ = 1.16e-01
        H delta = 5.9207e-02
        Ca delta = 5.6545e-02
    -- Iteration 25:
    dJ = 9.03e-02
        H delta = 5.1666e-02
        Ca delta = 3.8794e-02
    -- Iteration 30:
    dJ = 7.65e-02
        H delta = 4.7479e-02
        Ca delta = 2.9289e-02
    -- Iteration 35:
    dJ = 7.07e-02
        H delta = 4.3949e-02
        Ca delta = 2.3789e-02
    -- Iteration 40:
    dJ = 6.57e-02
        H delta = 3.9328e-02
        Ca delta = 1.9672e-02
    -- Iteration 45:
    dJ = 6.11e-02
        H delta = 3.4134e-02
        Ca delta = 1.5865e-02
    -- Iteration 50:
    dJ = 5.51e-02
        H delta = 2.9033e-02
        Ca delta = 1.2424e-02
    -- Iteration 55:
    dJ = 4.77e-02
        H delta = 2.3678e-02
        Ca delta = 9.2823e-03
    -- Iteration 60:
    dJ = 3.92e-02
        H delta = 2.0252e-02
        Ca delta = 6.7142e-03
    -- Iteration 65:
    dJ = 2.97e-02
        H delta = 1.6049e-02
        Ca delta = 4.5868e-03
    -- Iteration 70:
    dJ = 2.15e-02
        H delta = 1.1876e-02
        Ca delta = 3.0823e-03
    -- Iteration 75:
    dJ = 1.48e-02
        H delta = 8.2821e-03
        Ca delta = 1.9886e-03
    -- Iteration 80:
    dJ = 9.77e-03
        H delta = 5.5386e-03
        Ca delta = 1.2633e-03
    -- Iteration 85:
    dJ = 6.29e-03
        H delta = 3.5972e-03
        Ca delta = 7.9398e-04
    -- Iteration 90:
    dJ = 3.98e-03
        H delta = 2.2896e-03
        Ca delta = 4.9492e-04
    -- Iteration 95:
    dJ = 2.49e-03
        H delta = 1.4378e-03
        Ca delta = 3.0683e-04
    --------------------------------------------------------------------------------
    Final Iteration: 99
    --------------------------------------------------------------------------------
    dJ = 1.70e-03
        H delta = 9.8324e-04
        Ca delta = 2.0994e-04
    --------------------------------------------------------------------------------
    Context converged to statistical equilibrium in 99 iterations after 4.16 s.
    --------------------------------------------------------------------------------
    LTE Iterations 1 (-- slowest convergence)
    -- Iteration 0:
    dJ = 1.00e+00
        (Lambda iterating background)
    -- Iteration 5:
    dJ = 4.06e+00
        H delta = 8.9783e-01
        Ca delta = 3.6731e-01
        ne delta = 3.4874e-03
    -- Iteration 10:
    dJ = 5.06e-01
        H delta = 3.2858e-01
        Ca delta = 1.6554e-01
        ne delta = 6.0455e-12
    -- Iteration 15:
    dJ = 1.99e-01
        H delta = 1.5157e-01
        Ca delta = 8.4264e-02
        ne delta = 4.7346e-14
    -- Iteration 20:
    dJ = 1.21e-01
        H delta = 7.2398e-02
        Ca delta = 5.3020e-02
        ne delta = 8.8004e-16
    -- Iteration 25:
    dJ = 9.10e-02
        H delta = 5.5430e-02
        Ca delta = 3.6329e-02
        ne delta = 1.2321e-15
    -- Iteration 30:
    dJ = 7.79e-02
        H delta = 4.9185e-02
        Ca delta = 2.6576e-02
        ne delta = 5.2802e-16
    -- Iteration 35:
    dJ = 7.01e-02
        H delta = 4.5600e-02
        Ca delta = 2.0183e-02
        ne delta = 8.5057e-16
    -- Iteration 40:
    dJ = 6.54e-02
        H delta = 4.0902e-02
        Ca delta = 1.5599e-02
        ne delta = 0.0000e+00
    -- Iteration 45:
    dJ = 6.12e-02
        H delta = 3.6166e-02
        Ca delta = 1.1778e-02
        ne delta = 1.4081e-15
    -- Iteration 50:
    dJ = 5.65e-02
        H delta = 3.3898e-02
        Ca delta = 8.5177e-03
        ne delta = 1.7011e-15
    -- Iteration 55:
    dJ = 5.08e-02
        H delta = 3.1091e-02
        Ca delta = 5.8809e-03
        ne delta = 9.4835e-16
    -- Iteration 60:
    dJ = 4.43e-02
        H delta = 2.7631e-02
        Ca delta = 3.8808e-03
        ne delta = 1.7601e-16
    -- Iteration 65:
    dJ = 3.68e-02
        H delta = 2.3552e-02
        Ca delta = 2.5272e-03
        ne delta = 2.7090e-16
    -- Iteration 70:
    dJ = 2.93e-02
        H delta = 1.9163e-02
        Ca delta = 1.9372e-03
        ne delta = 4.0635e-16
    -- Iteration 75:
    dJ = 2.28e-02
        H delta = 1.5044e-02
        Ca delta = 1.6484e-03
        ne delta = 1.0669e-15
    -- Iteration 80:
    dJ = 1.71e-02
        H delta = 1.1342e-02
        Ca delta = 1.3200e-03
        ne delta = 8.2981e-16
    -- Iteration 85:
    dJ = 1.24e-02
        H delta = 8.2873e-03
        Ca delta = 1.0003e-03
        ne delta = 3.4023e-16
    -- Iteration 90:
    dJ = 8.81e-03
        H delta = 5.9052e-03
        Ca delta = 7.2990e-04
        ne delta = 2.2523e-15
    -- Iteration 95:
    dJ = 6.08e-03
        H delta = 4.0772e-03
        Ca delta = 5.1465e-04
        ne delta = 0.0000e+00
    -- Iteration 100:
    dJ = 4.13e-03
        H delta = 2.7783e-03
        Ca delta = 3.5577e-04
        ne delta = 1.5041e-15
    -- Iteration 105:
    dJ = 2.78e-03
        H delta = 1.8748e-03
        Ca delta = 2.4245e-04
        ne delta = 1.6596e-15
    -- Iteration 110:
    dJ = 1.86e-03
        H delta = 1.2571e-03
        Ca delta = 1.6362e-04
        ne delta = 1.3609e-15
    --------------------------------------------------------------------------------
    Final Iteration: 113
    --------------------------------------------------------------------------------
    dJ = 1.46e-03
        H delta = 9.8695e-04
        Ca delta = 1.2881e-04
        ne delta = 1.5041e-15
    --------------------------------------------------------------------------------
    Context converged to statistical equilibrium in 113 iterations after 5.28 s.
    --------------------------------------------------------------------------------
    LTE Iterations 1 (-- slowest convergence)
    -- Iteration 0:
    dJ = 1.00e+00
        (Lambda iterating background)
    -- Iteration 5:
    dJ = 4.03e+00
        H delta = 8.9763e-01
        Ca delta = 2.3669e-01
    -- Iteration 10:
    dJ = 4.21e-01
        H delta = 2.2277e-01
        Ca delta = 1.6857e-01
    -- Iteration 15:
    dJ = 1.69e-01
        H delta = 8.8819e-02
        Ca delta = 6.4272e-02
    -- Iteration 20:
    dJ = 1.10e-01
        H delta = 5.8898e-02
        Ca delta = 3.9147e-02
    -- Iteration 25:
    dJ = 8.63e-02
        H delta = 5.3224e-02
        Ca delta = 2.8333e-02
    -- Iteration 30:
    dJ = 7.33e-02
        H delta = 4.8640e-02
        Ca delta = 2.2364e-02
    -- Iteration 35:
    dJ = 6.62e-02
        H delta = 4.4336e-02
        Ca delta = 1.8152e-02
    -- Iteration 40:
    dJ = 6.06e-02
        H delta = 3.8713e-02
        Ca delta = 1.4505e-02
    -- Iteration 45:
    dJ = 5.45e-02
        H delta = 3.2315e-02
        Ca delta = 1.1208e-02
    -- Iteration 50:
    dJ = 4.71e-02
        H delta = 2.4963e-02
        Ca delta = 8.3046e-03
    -- Iteration 55:
    dJ = 3.81e-02
        H delta = 1.9479e-02
        Ca delta = 5.8767e-03
    -- Iteration 60:
    dJ = 2.92e-02
        H delta = 1.5303e-02
        Ca delta = 3.9860e-03
    -- Iteration 65:
    dJ = 2.08e-02
        H delta = 1.1179e-02
        Ca delta = 2.6145e-03
    -- Iteration 70:
    dJ = 1.42e-02
        H delta = 7.7443e-03
        Ca delta = 1.6870e-03
    -- Iteration 75:
    dJ = 9.51e-03
        H delta = 5.2042e-03
        Ca delta = 1.0893e-03
    -- Iteration 80:
    dJ = 6.08e-03
        H delta = 3.3672e-03
        Ca delta = 6.7075e-04
    -- Iteration 86:
    dJ = 3.47e-03
        H delta = 1.9345e-03
        Ca delta = 3.7143e-04
    -- Iteration 91:
    dJ = 2.15e-03
        H delta = 1.2012e-03
        Ca delta = 2.2778e-04
    --------------------------------------------------------------------------------
    Final Iteration: 93
    --------------------------------------------------------------------------------
    dJ = 1.77e-03
        H delta = 9.8999e-04
        Ca delta = 1.8951e-04
    --------------------------------------------------------------------------------
    Context converged to statistical equilibrium in 93 iterations after 3.90 s.
    --------------------------------------------------------------------------------
    LTE Iterations 1 (-- slowest convergence)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  14.898 seconds)


.. _sphx_glr_download_auto_examples_plot_SimpleLineTest.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_SimpleLineTest.py <plot_SimpleLineTest.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_SimpleLineTest.ipynb <plot_SimpleLineTest.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
