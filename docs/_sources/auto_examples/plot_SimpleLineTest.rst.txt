
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_SimpleLineTest.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_SimpleLineTest.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_SimpleLineTest.py:


===============================================================
Computing a simple NLTE 8542 line profile in a FAL C atmosphere
===============================================================

.. GENERATED FROM PYTHON SOURCE LINES 7-10

First, we import everything we need. Lightweaver is typically imported as
`lw`, but things like the library of model atoms and Fal atmospheres need to
be imported separately.

.. GENERATED FROM PYTHON SOURCE LINES 10-19

.. code-block:: default

    from lightweaver.fal import Falc82
    from lightweaver.rh_atoms import H_6_atom, C_atom, O_atom, Si_atom, Al_atom, \
    CaII_atom, Fe_atom, He_9_atom, MgII_atom, N_atom, Na_atom, S_atom
    import lightweaver as lw
    import matplotlib.pyplot as plt
    import time
    import numpy as np









.. GENERATED FROM PYTHON SOURCE LINES 20-23

Now, we define the functions that will be used in our spectral synthesise.
First `synth_8542` which synthesises and returns the line given by an
atmosphere.

.. GENERATED FROM PYTHON SOURCE LINES 23-86

.. code-block:: default

    def synth_8542(atmos, conserve, useNe, wave):
        '''
        Synthesise a spectral line for given atmosphere with different
        conditions.

        Parameters
        ----------
        atmos : lw.Atmosphere
            The atmospheric model in which to synthesise the line.
        conserve : bool
            Whether to start from LTE electron density and conserve charge, or
            simply use from the electron density present in the atomic model.
        useNe : bool
            Whether to use the electron density present in the model as the
            starting solution, or compute the LTE electron density.
        wave : np.ndarray
            Array of wavelengths over which to resynthesise the final line
            profile for muz=1.

        Returns
        -------
        ctx : lw.Context
            The Context object that was used to compute the equilibrium
            populations.
        Iwave : np.ndarray
            The intensity at muz=1 for each wavelength in `wave`.
        '''
        # Configure the atmospheric angular quadrature
        atmos.quadrature(5)
        # Configure the set of atomic models to use.
        aSet = lw.RadiativeSet([H_6_atom(), C_atom(), O_atom(), Si_atom(),
                                Al_atom(), CaII_atom(), Fe_atom(), He_9_atom(),
                                MgII_atom(), N_atom(), Na_atom(), S_atom()
                               ])
        # Set H and Ca to "active" i.e. NLTE, everything else participates as an
        # LTE background.
        aSet.set_active('H', 'Ca')
        # Compute the necessary wavelength dependent information (SpectrumConfiguration).
        spect = aSet.compute_wavelength_grid()

        # Either compute the equilibrium populations at the fixed electron density
        # provided in the model, or iterate an LTE electron density and compute the
        # corresponding equilibrium populations (SpeciesStateTable).
        if useNe:
            eqPops = aSet.compute_eq_pops(atmos)
        else:
            eqPops = aSet.iterate_lte_ne_eq_pops(atmos)

        # Configure the Context which holds the state of the simulation for the
        # backend, and provides the python interface to the backend.
        # Feel free to increase Nthreads to increase the number of threads the
        # program will use.
        ctx = lw.Context(atmos, spect, eqPops, conserveCharge=conserve, Nthreads=1)
        # Iterate the Context to convergence (using the iteration function now
        # provided by Lightweaver)
        lw.iterate_ctx_se(ctx)
        # Update the background populations based on the converged solution and
        # compute the final intensity for mu=1 on the provided wavelength grid.
        eqPops.update_lte_atoms_Hmin_pops(atmos)
        Iwave = ctx.compute_rays(wave, [atmos.muz[-1]], stokes=False)
        return ctx, Iwave









.. GENERATED FROM PYTHON SOURCE LINES 87-88

The wavelength grid to output the final synthesised line on.

.. GENERATED FROM PYTHON SOURCE LINES 88-90

.. code-block:: default

    wave = np.linspace(853.9444, 854.9444, 1001)








.. GENERATED FROM PYTHON SOURCE LINES 91-99

Load an lw.Atmosphere object containing the FAL C atmosphere with 82 points
in depth, before synthesising the Ca II 8542 \AA line profile using:

- The given electron density.
- The electron density charge conserved from a starting LTE solution.
- The LTE electron density.

These results are then plotted.

.. GENERATED FROM PYTHON SOURCE LINES 99-112

.. code-block:: default


    atmosRef = Falc82()
    ctxRef, IwaveRef = synth_8542(atmosRef, conserve=False, useNe=True, wave=wave)
    atmosCons = Falc82()
    ctxCons, IwaveCons = synth_8542(atmosCons, conserve=True, useNe=False, wave=wave)
    atmosLte = Falc82()
    ctx, IwaveLte = synth_8542(atmosLte, conserve=False, useNe=False, wave=wave)

    plt.plot(wave, IwaveRef, label='Reference FAL')
    plt.plot(wave, IwaveCons, label='Reference Cons')
    plt.plot(wave, IwaveLte, label='Reference LTE n_e')
    plt.legend()
    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_SimpleLineTest_001.png
   :alt: plot SimpleLineTest
   :srcset: /auto_examples/images/sphx_glr_plot_SimpleLineTest_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    -- Iteration 0:
    dJ = 1.00e+00
        (Lambda iterating background)
    -- Iteration 6:
    dJ = 2.37e+00
        H delta = 5.9290e-01
        Ca delta = 2.1543e-01
    -- Iteration 12:
    dJ = 3.93e-01
        H delta = 1.9858e-01
        Ca delta = 1.4962e-01
    -- Iteration 18:
    dJ = 1.37e-01
        H delta = 7.1397e-02
        Ca delta = 6.8286e-02
    -- Iteration 24:
    dJ = 9.43e-02
        H delta = 5.2630e-02
        Ca delta = 4.1533e-02
    -- Iteration 30:
    dJ = 7.65e-02
        H delta = 4.7479e-02
        Ca delta = 2.9289e-02
    -- Iteration 36:
    dJ = 6.96e-02
        H delta = 4.3111e-02
        Ca delta = 2.2945e-02
    -- Iteration 42:
    dJ = 6.41e-02
        H delta = 3.7163e-02
        Ca delta = 1.8061e-02
    -- Iteration 48:
    dJ = 5.78e-02
        H delta = 3.1195e-02
        Ca delta = 1.3774e-02
    -- Iteration 54:
    dJ = 4.94e-02
        H delta = 2.4380e-02
        Ca delta = 9.8703e-03
    -- Iteration 60:
    dJ = 3.92e-02
        H delta = 2.0252e-02
        Ca delta = 6.7142e-03
    -- Iteration 66:
    dJ = 2.79e-02
        H delta = 1.5184e-02
        Ca delta = 4.2367e-03
    -- Iteration 72:
    dJ = 1.87e-02
        H delta = 1.0371e-02
        Ca delta = 2.5952e-03
    -- Iteration 78:
    dJ = 1.16e-02
        H delta = 6.5312e-03
        Ca delta = 1.5167e-03
    -- Iteration 84:
    dJ = 6.88e-03
        H delta = 3.9289e-03
        Ca delta = 8.7192e-04
    -- Iteration 90:
    dJ = 3.98e-03
        H delta = 2.2896e-03
        Ca delta = 4.9492e-04
    -- Iteration 96:
    dJ = 2.27e-03
        H delta = 1.3085e-03
        Ca delta = 2.7870e-04
    --------------------------------------------------------------------------------
    Final Iteration: 99
    --------------------------------------------------------------------------------
    dJ = 1.70e-03
        H delta = 9.8324e-04
        Ca delta = 2.0994e-04
    --------------------------------------------------------------------------------
    Context converged to statistical equilibrium in 99 iterations after 3.40 s.
    --------------------------------------------------------------------------------
    LTE Iterations 1 (-- slowest convergence)
    -- Iteration 0:
    dJ = 1.00e+00
        (Lambda iterating background)
    -- Iteration 6:
    dJ = 1.38e+00
        H delta = 5.8716e-01
        Ca delta = 2.2062e-01
        ne delta = 3.3514e-04
    -- Iteration 12:
    dJ = 3.48e-01
        H delta = 2.4886e-01
        Ca delta = 1.2494e-01
        ne delta = 8.7511e-13
    -- Iteration 18:
    dJ = 1.38e-01
        H delta = 9.1887e-02
        Ca delta = 6.3088e-02
        ne delta = 3.1681e-15
    -- Iteration 24:
    dJ = 9.48e-02
        H delta = 5.8051e-02
        Ca delta = 3.8926e-02
        ne delta = 1.0669e-15
    -- Iteration 30:
    dJ = 7.79e-02
        H delta = 4.9185e-02
        Ca delta = 2.6576e-02
        ne delta = 5.2802e-16
    -- Iteration 36:
    dJ = 6.91e-02
        H delta = 4.4754e-02
        Ca delta = 1.9172e-02
        ne delta = 8.8004e-16
    -- Iteration 42:
    dJ = 6.37e-02
        H delta = 3.8728e-02
        Ca delta = 1.3993e-02
        ne delta = 8.5057e-16
    -- Iteration 48:
    dJ = 5.84e-02
        H delta = 3.4724e-02
        Ca delta = 9.7506e-03
        ne delta = 2.4894e-15
    -- Iteration 54:
    dJ = 5.21e-02
        H delta = 3.1633e-02
        Ca delta = 6.3471e-03
        ne delta = 6.8046e-16
    -- Iteration 60:
    dJ = 4.43e-02
        H delta = 2.7631e-02
        Ca delta = 3.8808e-03
        ne delta = 1.7601e-16
    -- Iteration 66:
    dJ = 3.53e-02
        H delta = 2.2680e-02
        Ca delta = 2.3270e-03
        ne delta = 4.0635e-16
    -- Iteration 72:
    dJ = 2.67e-02
        H delta = 1.7488e-02
        Ca delta = 1.8160e-03
        ne delta = 3.4023e-16
    -- Iteration 78:
    dJ = 1.92e-02
        H delta = 1.2754e-02
        Ca delta = 1.4523e-03
        ne delta = 4.0635e-16
    -- Iteration 84:
    dJ = 1.32e-02
        H delta = 8.8528e-03
        Ca delta = 1.0626e-03
        ne delta = 1.0560e-15
    -- Iteration 90:
    dJ = 8.81e-03
        H delta = 5.9052e-03
        Ca delta = 7.2990e-04
        ne delta = 2.2523e-15
    -- Iteration 96:
    dJ = 5.63e-03
        H delta = 3.7802e-03
        Ca delta = 4.7848e-04
        ne delta = 2.7576e-15
    -- Iteration 102:
    dJ = 3.53e-03
        H delta = 2.3759e-03
        Ca delta = 3.0562e-04
        ne delta = 7.5206e-16
    -- Iteration 108:
    dJ = 2.19e-03
        H delta = 1.4760e-03
        Ca delta = 1.9163e-04
        ne delta = 1.4081e-15
    --------------------------------------------------------------------------------
    Final Iteration: 113
    --------------------------------------------------------------------------------
    dJ = 1.46e-03
        H delta = 9.8695e-04
        Ca delta = 1.2881e-04
        ne delta = 1.5041e-15
    --------------------------------------------------------------------------------
    Context converged to statistical equilibrium in 113 iterations after 4.20 s.
    --------------------------------------------------------------------------------
    LTE Iterations 1 (-- slowest convergence)
    -- Iteration 0:
    dJ = 1.00e+00
        (Lambda iterating background)
    -- Iteration 7:
    dJ = 1.15e+00
        H delta = 4.0475e-01
        Ca delta = 2.6920e-01
    -- Iteration 13:
    dJ = 2.29e-01
        H delta = 1.1485e-01
        Ca delta = 8.6867e-02
    -- Iteration 19:
    dJ = 1.17e-01
        H delta = 6.3702e-02
        Ca delta = 4.2608e-02
    -- Iteration 26:
    dJ = 8.29e-02
        H delta = 5.2227e-02
        Ca delta = 2.6872e-02
    -- Iteration 32:
    dJ = 7.01e-02
        H delta = 4.7059e-02
        Ca delta = 2.0561e-02
    -- Iteration 39:
    dJ = 6.17e-02
        H delta = 3.9939e-02
        Ca delta = 1.5202e-02
    -- Iteration 46:
    dJ = 5.32e-02
        H delta = 3.1014e-02
        Ca delta = 1.0595e-02
    -- Iteration 53:
    dJ = 4.18e-02
        H delta = 2.1038e-02
        Ca delta = 6.7953e-03
    -- Iteration 60:
    dJ = 2.92e-02
        H delta = 1.5303e-02
        Ca delta = 3.9860e-03
    -- Iteration 67:
    dJ = 1.79e-02
        H delta = 9.7055e-03
        Ca delta = 2.1984e-03
    -- Iteration 74:
    dJ = 1.04e-02
        H delta = 5.6556e-03
        Ca delta = 1.1930e-03
    -- Iteration 80:
    dJ = 6.08e-03
        H delta = 3.3672e-03
        Ca delta = 6.7075e-04
    -- Iteration 87:
    dJ = 3.15e-03
        H delta = 1.7595e-03
        Ca delta = 3.3691e-04
    -- Iteration 93:
    dJ = 1.77e-03
        H delta = 9.8999e-04
        Ca delta = 1.8951e-04
    Final Iteration shown above.
    --------------------------------------------------------------------------------
    Context converged to statistical equilibrium in 93 iterations after 3.13 s.
    --------------------------------------------------------------------------------
    LTE Iterations 1 (-- slowest convergence)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  12.037 seconds)


.. _sphx_glr_download_auto_examples_plot_SimpleLineTest.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_SimpleLineTest.py <plot_SimpleLineTest.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_SimpleLineTest.ipynb <plot_SimpleLineTest.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
